<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//global variables
global.firstKillAchieved = false;

// Initialize grid.
global.grid = mp_grid_create(X_MARGIN, Y_MARGIN, ceil(room_width/CELL_SIZE) - 2*X_MARGIN/CELL_SIZE, ceil(room_height/CELL_SIZE) - 2*Y_MARGIN/CELL_SIZE, CELL_SIZE, CELL_SIZE)

// Spawning variables. // Katie: Grade? Score? Lives? Which ones are we using?
// &lt;from master&gt;
lives = 30
score = 0
// &lt;/from master&gt;
grade = 100
wave = 0
global.enemiesInQueue = 0
spawnTime = 60 // 60 steps between spawning each unit.
waveText = false

// Tower strip variables.
towerStripX = room_width - 6*97 - 1
towerStripY = 0
towerStripXOffset = 97
towerStripYOffset = 65

for (i = 0; i &lt; 6; i++)
{
    towerCost[i] = 100*(i+1)
    towerDmg[i] = 6*(i+1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn enemies.
if (wave % 2 != 0) {newEnemy = instance_create(o_assignmentspawn.x, o_assignmentspawn.y, o_assignment_homework)}
else {newEnemy = instance_create(o_examspawn.x, o_examspawn.y, o_assignment_bigtest)}
with (newEnemy)
{
    if (mp_grid_path(global.grid, path, x, y, o_goal.x, o_goal.y, true))
    {
        showPath = true
        path_start(path, spd, 0, false)
    }
}
global.enemiesInQueue--
if (global.enemiesInQueue &gt; 0) {alarm[1] = spawnTime} // Continue spawning if there are more enemies waiting to come.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>waveText = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw rectangle overlay if player clicks on tower.
if (mouse_check_button_pressed(mb_left))
{
    currentTower = instance_position(mouse_x, mouse_y, o_towerParent)
    if (currentTower)
    {
        with (currentTower) {rectangleOverlay = !rectangleOverlay} // Toggle showing rectangle overlay.
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Tower GUI strip.
draw_set_color(c_white)
for (i = 0; i &lt; 6; i++)
{
    draw_rectangle(towerStripX + i*towerStripXOffset, towerStripY, towerStripX + (i+1)*towerStripXOffset, towerStripY + towerStripYOffset, 1)
    draw_sprite(s_tower, 0, towerStripX + 17 + i*towerStripXOffset, towerStripY + 49)
    draw_set_font(font0)
    draw_text(towerStripX + 37 + i*towerStripXOffset, towerStripY + 4, "Cost: " + string(towerCost[i]))
    draw_text(towerStripX + 37 + i*towerStripXOffset, towerStripY + 4 + 13, "Dmg: " + string(towerDmg[i]))
    draw_text(towerStripX + 37 + i*towerStripXOffset, towerStripY + 4 + 26, "Acc:")
}

// Draw black GUI outline.
draw_set_color(c_black)
draw_rectangle(X_MARGIN, Y_MARGIN + 2, room_width - X_MARGIN, room_height - Y_MARGIN, 1)
draw_set_color(c_white)
draw_set_font(font1)
draw_text(x, y, "Lives: " + string(lives))
/*// Draw the player's grade (proportional to the student union's health) on the screen.
draw_text(x, y, "Grade: " + string(grade))
// Draw the player's score.
draw_text(0, 20, "Score: " + string(score))
// Draw the player's lives.
draw_text(0, 40, "Lives: " + string(lives))*/
// Draw tutorial text.
draw_set_font(font0)
draw_text(35, 67, "Press Enter for the next wave.#Click to build towers.#Right-click to demolish towers.")

// Display "Wave #" if the wave just changed, aka if waveText is true.
if (waveText)
{
    draw_set_font(font2)
    draw_set_color(c_white)
    draw_text(room_width/2 - 50, room_height/2 - 40, "Wave " + string(wave))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* // Katie: Not necessary since we're not doing the build-anywhere idea. Can easily be modified to show green over mount points and red otherwise.
// If can place tower where mouse is positioned, rectangle is green.
if (canPlaceHere)
{
    xx = floor(mouse_x/CELL_SIZE)*CELL_SIZE + 16
    yy = floor(mouse_y/CELL_SIZE)*CELL_SIZE + 16
    draw_set_alpha(.7)
    draw_rectangle_color(xx - 16, yy - 16, xx + 16, yy + 16, c_green, c_green, c_green, c_green, false)
    draw_set_alpha(1)
}
else//debug
{
    xx = floor(mouse_x/CELL_SIZE)*CELL_SIZE + 16
    yy = floor(mouse_y/CELL_SIZE)*CELL_SIZE + 16
    draw_set_alpha(.7)
    draw_rectangle_color(xx - 16, yy - 16, xx + 16, yy + 16, c_red, c_red, c_red, c_red, false)
    draw_set_alpha(1)
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.enemiesInQueue == 0)
{
    wave++
    waveText = true
    alarm[0] = 60
    global.enemiesInQueue += wave*5
    alarm[1] = spawnTime
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
