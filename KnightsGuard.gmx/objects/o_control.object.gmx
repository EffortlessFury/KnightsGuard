<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//global variables
global.firstKillAchieved = false;

// Initialize grid.
global.grid = mp_grid_create(X_MARGIN, Y_MARGIN, ceil(room_width/CELL_SIZE) - 2*X_MARGIN/CELL_SIZE, ceil(room_height/CELL_SIZE) - 2*Y_MARGIN/CELL_SIZE, CELL_SIZE, CELL_SIZE)
mp_grid_add_instances(global.grid, o_mount, false)

// Spawning variables.
score = 0
global.uscore = score; // This needs to be here in order to reset score for new game.
money = 500
r0und = 1
wave = 0

global.enemiesInQueue = 0
roundChanged = false
roundStartTime = 0
roundElapsedSeconds = 0
spawnType = 0
spawnTime = 60 // 60 steps between spawning each unit.
waveChanged = false

// Tower strip variables.
towerStripX = room_width - 3*97 - 1
towerStripY = 0
towerStripXOffset = 97
towerStripYOffset = 65
chosenTower = 0 // The tower the player currently has selected to build next.

// Set up listed tower name, cost, damage, and accuracy.
towerName[0] = "Normal"
towerName[1] = "AOE"
towerName[2] = "Sniper"
for (i = 0; i &lt; 3; i++)
{
    towerCost[i] = 100*(i+1)
}
towerDmg[0] = 10
towerDmg[1] = 12
towerDmg[2] = 25
towerAcc[0] = "60%"
towerAcc[1] = "75%"
towerAcc[2] = "90%"

// Health stuff.
maxHealth = 100
health = maxHealth
healthX1 = 0
healthY1 = 0
healthXDisplacement = 350
healthY2 = healthY1 + 30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn enemies.
if (global.enemiesInQueue &gt; 0)
{
    spawnType = choose(0, 1, 2, 3)
    switch (spawnType)
    {
        case 0:
            enemyToSpawn = choose(o_assignment_homework, o_assignment_quiz, o_assignment_test, o_assignment_bigtest)
            instance_create(o_assignmentspawn1.x, o_assignmentspawn1.y, enemyToSpawn)
            break;
        case 1:
            enemyToSpawn = choose(o_impediment_damage, o_impediment_range, o_impediment_speed)
            instance_create(o_impedimentspawn1.x, o_assignmentspawn1.y, enemyToSpawn)
            break;
        case 2:
            enemyToSpawn = choose(o_assignment_homework, o_assignment_quiz, o_assignment_test, o_assignment_bigtest)
            instance_create(o_assignmentspawn2.x, o_assignmentspawn2.y, enemyToSpawn)
            break;
        case 3:
            enemyToSpawn = choose(o_financial, o_impediment_damage, o_impediment_range, o_impediment_speed)
            instance_create(o_impedimentspawn2.x, o_assignmentspawn2.y, enemyToSpawn)
            break;
    }
}
with (o_enemy)
{
    if (mp_grid_path(global.grid, path, x, y, o_studentunion.x, o_studentunion.y, true))
    {
        //showPath = true
        path_start(path, spd, 0, false)
    }
}
global.enemiesInQueue--
if (global.enemiesInQueue &gt; 0) {alarm[1] = spawnTime} // Continue spawning if there are more enemies waiting to come.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>waveChanged = false
roundChanged = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.enemiesInQueue &lt; 0) {global.enemiesInQueue = 0}

// Calculate round elapsed time in seconds.
if (wave == 0) {roundStartTime = current_time} // Keep elapsed time counter from starting before ready.
roundElapsedSeconds = (current_time - roundStartTime) div 1000

if (mouse_check_button_pressed(mb_left))
{
    // Draw rectangle overlay if player clicks on tower.
    currentTower = instance_position(mouse_x, mouse_y, o_tower)
    if (currentTower)
    {
        with (currentTower) {rectangleOverlay = !rectangleOverlay} // Toggle showing rectangle overlay.
    }
    // Choose tower type to build.
    else if (mouse_x &gt; towerStripX + 0*towerStripXOffset &amp;&amp; mouse_x &lt; towerStripX + 1*towerStripXOffset &amp;&amp; mouse_y &gt; towerStripY &amp;&amp; mouse_y &lt; towerStripYOffset)
    {
        chosenTower = 0
    }
    else if (mouse_x &gt; towerStripX + 1*towerStripXOffset &amp;&amp; mouse_x &lt; towerStripX + 2*towerStripXOffset &amp;&amp; mouse_y &gt; towerStripY &amp;&amp; mouse_y &lt; towerStripYOffset)
    {
        chosenTower = 1
    }
    else if (mouse_x &gt; towerStripX + 2*towerStripXOffset &amp;&amp; mouse_x &lt; towerStripX + 3*towerStripXOffset &amp;&amp; mouse_y &gt; towerStripY &amp;&amp; mouse_y &lt; towerStripYOffset)
    {
        chosenTower = 2
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw black GUI rectangles.
draw_set_color(c_black)
draw_set_alpha(.6)
draw_rectangle(0, 0, room_width, Y_MARGIN, 0)
draw_rectangle(0, room_height - Y_MARGIN, room_width, room_height, 0)
draw_set_alpha(1)

// Draw the player's grade (proportional to the student union's health), money, and enemies left on the screen.
draw_set_color(c_white)
draw_set_font(font1)
draw_text(room_width - 115, 70, "Money: " + string(money))
draw_text(0, 40, "Incoming: " + string(global.enemiesInQueue))

// Tower GUI strip.
draw_set_color(c_white)
for (i = 0; i &lt; 3; i++)
{
    draw_rectangle(towerStripX + i*towerStripXOffset, towerStripY, towerStripX + (i+1)*towerStripXOffset, towerStripY + towerStripYOffset, 1)
    draw_sprite(s_tower, 0, towerStripX + 17 + i*towerStripXOffset, towerStripY + 49)
    draw_set_font(font0)
    draw_text(towerStripX + 37 + i*towerStripXOffset, towerStripY + 4, string(towerName[i]))
    draw_text(towerStripX + 37 + i*towerStripXOffset, towerStripY + 4 + 13, "Cost: " + string(towerCost[i]))
    draw_text(towerStripX + 37 + i*towerStripXOffset, towerStripY + 4 + 26, "Dmg: " + string(towerDmg[i]))
    draw_text(towerStripX + 37 + i*towerStripXOffset, towerStripY + 4 + 39, "Acc: " + string(towerAcc[i]))
}
draw_set_color(c_red)
if (chosenTower == 0) {draw_circle(towerStripX + 0*towerStripXOffset + 64, towerStripY + 62, 3, false)}
else if (chosenTower == 1) {draw_circle(towerStripX + 1*towerStripXOffset + 64, towerStripY + 62, 3, false)}
else if (chosenTower == 2) {draw_circle(towerStripX + 2*towerStripXOffset + 64, towerStripY + 62, 3, false)}

// Draw elapsed time and tutorial text.
draw_set_color(c_white)
draw_set_font(font0)
draw_text(room_width/2 - 75, 42, "Elapsed time: " + string(roundElapsedSeconds div 60) + ":" + string(roundElapsedSeconds mod 60) + ":" + string((current_time - roundStartTime) div 10 mod 100))
draw_text(5, 67, "Protect the student union!#Press Enter for the next wave. Press P to pause.#Click on a tower in the upper right to choose it.#Click on the buildings on the map to build towers.#Click on a built tower to upgrade or downgrade it.#Right-click to demolish towers and regain some money.")

// Draw score.
draw_set_color(c_white)
draw_set_font(font2)
draw_text(room_width/2 - 80, 3, "Score: " + string(global.uscore))

// Make sure healthbar doesn't try to go backward from being negative.
if (health &lt; 0) {health = 0}
// Bar.
draw_set_color(c_green)
draw_rectangle(healthX1, healthY1, healthX1 + (health/maxHealth)*healthXDisplacement, healthY2, 0) // Green.
draw_set_color(c_white)
draw_rectangle(healthX1, healthY1, healthX1 + healthXDisplacement, healthY2, 1) // Black.
// Draw the player's grade (proportional to the student union's health).
draw_set_font(font2)
draw_text(0, 0, "Grade: " + string(health))

// Display "Wave #" or "Round #" if the wave/round just changed, aka if waveChanged or roundChanged is true.
draw_set_color(c_white)
draw_set_font(font2)
if (waveChanged)
{
    if (roundChanged)
    {
        draw_text(room_width/2 - 55, room_height - 140, "Round " + string(r0und))
        draw_text(room_width/2 - 50, room_height - 100, "Wave " + string(wave))
    }
    else
    {
        draw_text(room_width/2 - 50, room_height - 100, "Wave " + string(wave))
    }
}
draw_text(room_width/2 - 100, room_height - 55, "Round " + string(r0und) + ", wave " + string(wave))

// Player lost.
if (health &lt;= 0)
{
    room_goto(losingScreen)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(o_aoe) &amp;&amp; money &gt;= 50)
{
    aoeTower = instance_nearest(mouse_x, mouse_y, o_aoe)
    with (aoeTower)
    {
        sPressed = true
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause the game!

/// Create the pause object, thus pausing the game
instance_create(0,0,o_pause);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.enemiesInQueue == 0)
{
    if (wave == 0) {audio_play_sound(snd_horn, 0, false)}
    wave++
    waveChanged = true
    alarm[0] = 60 // Show waveChanged text for one second.
    if (wave % 5 == 0)
    {
        if (r0und != 0) {roundStartTime = current_time}
        r0und++
        roundChanged = true
        wave = 1
        audio_play_sound(snd_horn, 0, false)
    }
    global.enemiesInQueue += wave*4
    alarm[1] = spawnTime // Spawn new enemy until enemiesInQueue is zero.
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
