<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Initialize grid.
global.grid = mp_grid_create(X_MARGIN, Y_MARGIN, ceil(room_width/CELL_SIZE) - 2*X_MARGIN/CELL_SIZE, ceil(room_height/CELL_SIZE) - 2*Y_MARGIN/CELL_SIZE, CELL_SIZE, CELL_SIZE)

lives = 30
wave = 0
score = 0
global.enemiesInQueue = 0
spawnTime = 60 // 60 steps between spawning each unit.
waveText = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handles enemies

// red enemy
newEnemy = instance_create(o_spawn.x, o_spawn.y, o_enemy)
with (newEnemy)
{
        showPath = true
        path_start(path, spd, 0, false)
}

global.enemiesInQueue--
if (global.enemiesInQueue &gt; 0) {alarm[1] = spawnTime} // Continue spawning if there are more enemies waiting to come.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>waveText = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Checking the place is valid to build a tower (in specific places, though that part isn't written yet).
if (mouse_y &gt; X_MARGIN &amp;&amp; mouse_y &lt; room_height - Y_MARGIN)
{
    // mp_grid_get_cell() is broken; it returns -1 or 0 instead of 1 or 0; update by removing the preceding "-" when the bug is fixed
    if (!(-mp_grid_get_cell(global.grid, floor((mouse_x - X_MARGIN)/CELL_SIZE), floor((mouse_y - Y_MARGIN)/CELL_SIZE)))) {canPlaceHere = true}
    else {canPlaceHere = false}
}
else {canPlaceHere = false}

// Building towers.
if (canPlaceHere &amp;&amp; mouse_check_button_pressed(mb_left))
{
    xx = floor(mouse_x/CELL_SIZE)*CELL_SIZE + 16
    yy = floor(mouse_y/CELL_SIZE)*CELL_SIZE + 16
    // Add tower.
    newTower = instance_create(xx, yy, o_tower)
    // Also add new tower to the grid so can't build another tower over it.
    mp_grid_add_cell(global.grid, (mouse_x - X_MARGIN) div CELL_SIZE, (mouse_y - Y_MARGIN) div CELL_SIZE)
}
// Removing towers.
if (!canPlaceHere &amp;&amp; mouse_check_button_pressed(mb_right))
{
    xx = floor(mouse_x/CELL_SIZE)*CELL_SIZE + 16
    yy = floor(mouse_y/CELL_SIZE)*CELL_SIZE + 16
    towerToBeRemoved = collision_point(xx, yy, o_tower, false, true)
    with (towerToBeRemoved) {instance_destroy()}
    mp_grid_clear_cell(global.grid, (mouse_x - X_MARGIN) div CELL_SIZE, (mouse_y - Y_MARGIN) div CELL_SIZE)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white)
draw_rectangle(X_MARGIN, Y_MARGIN, room_width - X_MARGIN, room_height - Y_MARGIN, true)
draw_set_font(font1)
// Draw the number of lives on the screen.
draw_text(x, y, "Lives: " + string(lives))

// Draw the scoreboard
draw_text(500, y, "Score: " + string(score))

draw_set_font(font0)
draw_text(35, 35, "Press Enter for the next wave.#Click to build towers.#Right-click to demolish towers.")

// Display "Wave #" if the wave just changed, aka if waveText is true.
if (waveText)
{
    draw_set_font(font2)
    draw_set_color(c_white)
    draw_text(room_width/2 - 50, room_height/2 - 40, "Wave " + string(wave))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If can place tower where mouse is positioned, rectangle is green.
if (canPlaceHere)
{
    xx = floor(mouse_x/CELL_SIZE)*CELL_SIZE + 16
    yy = floor(mouse_y/CELL_SIZE)*CELL_SIZE + 16
    draw_set_alpha(.7)
    draw_rectangle_color(xx - 16, yy - 16, xx + 16, yy + 16, c_green, c_green, c_green, c_green, false)
    draw_set_alpha(1)
}
else//debug
{
    xx = floor(mouse_x/CELL_SIZE)*CELL_SIZE + 16
    yy = floor(mouse_y/CELL_SIZE)*CELL_SIZE + 16
    draw_set_alpha(.7)
    draw_rectangle_color(xx - 16, yy - 16, xx + 16, yy + 16, c_red, c_red, c_red, c_red, false)
    draw_set_alpha(1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.enemiesInQueue == 0)
{
    wave++
    waveText = true
    alarm[0] = 60
    global.enemiesInQueue += wave*5
    alarm[1] = spawnTime
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
