<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_tower</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_tower</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
image_blend = make_color_hsv(100, 150, 100)

dmg_array[0] = 12;
dmg_array[1] = 22;
dmg_array[2] = 42;

range_array[0] = 150;
range_array[1] = 300;
range_array[2] = 450;

deviation_array[0] = 8;
deviation_array[1] = 5;
deviation_array[2] = 2;

fireSpeed = room_speed / 2;

checkMovement = false // Used to toggle the code checking whether the enemy is moving.
sPressed = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (checkMovement == true)
{
    checkMovement = false
    if (nearestEnemy)
    {
        // If enemy is moving, apply gaussian randomness (xprevious and yprevious equal x and y, respectively, if in the regular Step event, so the movement check using those variables is needed here).
        if (nearestEnemy.x != nearestEnemy.xprevious || nearestEnemy.y != nearestEnemy.yprevious)
        {
            xx = nearestEnemy.x+lengthdir_x(dst,nearestEnemy.direction); //add to bullet's target co-ordinates
            yy = nearestEnemy.y+lengthdir_y(dst,nearestEnemy.direction);
            rand = gauss(0, deviation_array[towerLevel]);
        }
        // If enemy is not moving, do not apply gaussian randomness.
        else
        {
            xx = nearestEnemy.x
            yy = nearestEnemy.y
            rand = 0;
        }
        bullet.direction = point_direction(bullet.x,bullet.y,xx + rand,yy + rand);
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
nearestEnemy = instance_nearest(x, y, o_enemy);
if (canShoot) {
    canShoot = false // Toggle shooting off until tower reloads.
    //Need array for distances across upgrades
    if (distance_to_object(nearestEnemy) &lt; (range_array[towerLevel] * rangeMultiplier)) {
        if (sPressed == true)
        {
            bullet = instance_create(x, y - 42, o_aoebullet)
            bullet.speed = 8; //I think this bullet speed should remain constant among all tower upgrades.
            bullet.atk = dmg_array[towerLevel] * 3.2; //Need array for damage across upgrades
            with (bullet) {image_blend = c_black}
            sPressed = false
            audio_play_sound(snd_catapult, 0, false)
            o_control.money -= 50
        }
        else
        {
            bullet = instance_create(x, y - 42, o_aoebullet)
            bullet.speed = 6; //I think this bullet speed should remain constant among all tower upgrades.
            bullet.atk = dmg_array[towerLevel] * damageMultiplier; //Need array for damage across upgrades
        }
        time = sqrt(sqr(nearestEnemy.x - bullet.x) + sqr(nearestEnemy.y - bullet.y))/bullet.speed; //work out how long the bullet will take to reach it
        dst = nearestEnemy.spd*time; //work out how far the enemy will travel in this time
        
        xx = nearestEnemy.x+lengthdir_x(dst,nearestEnemy.direction); //add to bullet's target co-ordinates
        yy = nearestEnemy.y+lengthdir_y(dst,nearestEnemy.direction);
        rand = gauss(0, deviation_array[towerLevel]);
        bullet.direction = point_direction(bullet.x,bullet.y,xx + rand,yy + rand);
        /*// Check whether enemy is moving or not; pass the reins here to End Step event so checking by xprevious and yprevious can work.
        checkMovement = true*/
    }
    alarm[0] = fireSpeed * speedMultiplier;
}

if (towerLevel == 0) {image_blend = make_color_hsv(100, 250, 100)}
else if (towerLevel == 1) {image_blend = make_color_hsv(100, 200, 100)}
else if (towerLevel == 2) {image_blend = make_color_hsv(100, 150, 100)}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,48</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
