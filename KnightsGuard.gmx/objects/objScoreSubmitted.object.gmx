<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Lets pull the high score list so the player can see what he was up against!
with(objSubmitRecord) instance_destroy();
gsGet_List(10);

//We are going to create a 3 stage check to make sure the list is loaded before we try to use it.

list_loaded = 0; //This will be a trigger for the step event to see if the list is loaded or not
alarm[0] = 15;  //Set alarm 0 to give some time for the list to be created.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// The list should be created now. Initiate step 2 in the step event - make sure the list is populated
list_loaded = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*This will check the state of the ds_list name_list to make sure that it has been 
populated. This will be used to create a "delay" to prevent errors if the game gets 
ahead of the network connection! */

if (list_loaded == 1) //Make sure the list is created (alarm)
    {
    if !ds_list_empty(name_list) //Now make sure the list is not empty
        {
        list_loaded = 2; //when its not empty initiate last step - draw it!
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// The high score table will be returned in a ds_list called name_list
gsGet_List_Result(10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This will basically draw a loading image while waiting for the list to populate, and then draw the list when its ready to go!

if (list_loaded == 0)
    {
    draw_sprite(s_loading,-1,265,room_height/2);
    }
else
    {
    draw_set_font(font_score);
    skip = 240 // This is the starting Y location of the table, and will be used to incriment the space between lines
    for (a=0; a&lt;20 a+=2;) //&lt;&lt; Notice we are incrimenting by 2 to only get the EVEN lines
        {
        skip+=30; //The spacing bwtween lines
        draw_text(135,skip,ds_list_find_value(name_list,a)); //Loop through all the EVEN indexes for the names only
        }

    skip2 = 240
    for (b=1; b&lt;20 b+=2;) //&lt;&lt; Notice we start on 1 and incriment by 2 to get only ODD lines.
        {
        skip2+=30;
        draw_text(300,skip2,ds_list_find_value(name_list,b)); //Loop through all the ODD indexes for the scores only.
        }
    // draw_text(135,610,"Press &lt;SPACE&gt; to restart!");
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
